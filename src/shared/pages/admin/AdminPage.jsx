import React, { useState } from "react";
import "./AdminPage.css";


function UsersSection() {
  const [users, setUsers] = useState([
    { id: 1, name: "Nguy·ªÖn VƒÉn A", email: "a@example.com" },
    { id: 2, name: "Tr·∫ßn Th·ªã B", email: "b@example.com" },
    { id: 3, name: "L√™ VƒÉn C", email: "c@example.com" },
    { id: 4, name: "Ph·∫°m Th·ªã D", email: "d@example.com" },
    { id: 5, name: "Ho√†ng VƒÉn E", email: "e@example.com" },
    { id: 6, name: "ƒê·ªó Th·ªã F", email: "f@example.com" },
    { id: 7, name: "B√πi VƒÉn G", email: "g@example.com" },
    { id: 8, name: "L√Ω Th·ªã H", email: "h@example.com" },
  ]);

  const [form, setForm] = useState({ name: "", email: "" });
  const [editingId, setEditingId] = useState(null);
  const [search, setSearch] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const usersPerPage = 5; // üîπ s·ªë user m·ªói trang

  // L·ªçc user theo search
  const filteredUsers = users.filter(
    (u) =>
      u.name.toLowerCase().includes(search.toLowerCase()) ||
      u.email.toLowerCase().includes(search.toLowerCase())
  );

  // T√≠nh to√°n ph√¢n trang
  const totalPages = Math.ceil(filteredUsers.length / usersPerPage);
  const startIdx = (currentPage - 1) * usersPerPage;
  const currentUsers = filteredUsers.slice(startIdx, startIdx + usersPerPage);

  // Th√™m ho·∫∑c c·∫≠p nh·∫≠t user
  const handleSubmit = (e) => {
    e.preventDefault();
    if (!form.name || !form.email) return;

    if (editingId) {
      setUsers(
        users.map((u) => (u.id === editingId ? { ...u, ...form } : u))
      );
      setEditingId(null);
    } else {
      setUsers([...users, { id: Date.now(), ...form }]);
    }
    setForm({ name: "", email: "" });
  };

  const handleEdit = (user) => {
    setForm({ name: user.name, email: user.email });
    setEditingId(user.id);
  };

  const handleDelete = (id) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y?")) {
      setUsers(users.filter((u) => u.id !== id));
    }
  };

  return (
    <div className="user-section">
      <h3>Danh s√°ch ng∆∞·ªùi d√πng</h3>

      {/* √î t√¨m ki·∫øm */}
      <input
        type="text"
        placeholder="üîç T√¨m ki·∫øm theo t√™n ho·∫∑c email..."
        className="search-box"
        value={search}
        onChange={(e) => {
          setSearch(e.target.value);
          setCurrentPage(1); // reset v·ªÅ trang 1 khi t√¨m ki·∫øm
        }}
      />

      {/* B·∫£ng ng∆∞·ªùi d√πng */}
      <table className="user-table">
        <thead>
          <tr>
            <th>#</th>
            <th>T√™n</th>
            <th>Email</th>
            <th>H√†nh ƒë·ªông</th>
          </tr>
        </thead>
        <tbody>
          {currentUsers.length > 0 ? (
            currentUsers.map((u, idx) => (
              <tr key={u.id}>
                <td>{startIdx + idx + 1}</td>
                <td>{u.name}</td>
                <td>{u.email}</td>
                <td>
                  <button className="btn edit" onClick={() => handleEdit(u)}>
                    ‚úèÔ∏è S·ª≠a
                  </button>
                  <button
                    className="btn delete"
                    onClick={() => handleDelete(u.id)}
                  >
                    üóëÔ∏è X√≥a
                  </button>
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="4" style={{ textAlign: "center", color: "#6b7280" }}>
                Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng
              </td>
            </tr>
          )}
        </tbody>
      </table>

      {/* Ph√¢n trang */}
      {totalPages > 1 && (
        <div className="pagination">
          <button
            disabled={currentPage === 1}
            onClick={() => setCurrentPage((p) => p - 1)}
          >
            ‚óÄ Tr∆∞·ªõc
          </button>
          <span>
            Trang {currentPage}/{totalPages}
          </span>
          <button
            disabled={currentPage === totalPages}
            onClick={() => setCurrentPage((p) => p + 1)}
          >
            Sau ‚ñ∂
          </button>
        </div>
      )}

      {/* Form th√™m / s·ª≠a */}
      <form onSubmit={handleSubmit} className="user-form">
        <h4>{editingId ? "C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng" : "Th√™m ng∆∞·ªùi d√πng m·ªõi"}</h4>
        <input
          type="text"
          placeholder="T√™n..."
          value={form.name}
          onChange={(e) => setForm({ ...form, name: e.target.value })}
        />
        <input
          type="email"
          placeholder="Email..."
          value={form.email}
          onChange={(e) => setForm({ ...form, email: e.target.value })}
        />
        <button type="submit" className="btn save">
          {editingId ? "L∆∞u thay ƒë·ªïi" : "Th√™m m·ªõi"}
        </button>
        {editingId && (
          <button
            type="button"
            className="btn cancel"
            onClick={() => {
              setForm({ name: "", email: "" });
              setEditingId(null);
            }}
          >
            H·ªßy
          </button>
        )}
      </form>
    </div>
  );
}




function OrdersSection() {
  const [orders, setOrders] = useState([
    {
      id: 101,
      customer: "Nguy·ªÖn VƒÉn A",
      total: 12000000,
      status: "pending",
      items: [
        { name: "iPhone 14 Pro", qty: 1, price: 12000000 }
      ]
    },
    {
      id: 102,
      customer: "Tr·∫ßn Th·ªã B",
      total: 24000000,
      status: "shipped",
      items: [
        { name: "MacBook Air M2", qty: 1, price: 24000000 }
      ]
    }
  ]);

  const [selectedOrder, setSelectedOrder] = useState(null);

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
  const updateStatus = (id, status) => {
    setOrders(
      orders.map((o) => (o.id === id ? { ...o, status } : o))
    );
  };

  return (
    <div className="orders-section">
      <h3>Danh s√°ch ƒë∆°n h√†ng</h3>

      <table className="order-table">
        <thead>
          <tr>
            <th>#</th>
            <th>Kh√°ch h√†ng</th>
            <th>T·ªïng ti·ªÅn</th>
            <th>Tr·∫°ng th√°i</th>
            <th>H√†nh ƒë·ªông</th>
          </tr>
        </thead>
        <tbody>
          {orders.map((o, idx) => (
            <tr key={o.id}>
              <td>{idx + 1}</td>
              <td>{o.customer}</td>
              <td>{o.total.toLocaleString()} ‚Ç´</td>
              <td>
                <select
                  value={o.status}
                  onChange={(e) => updateStatus(o.id, e.target.value)}
                >
                  <option value="pending">‚è≥ Ch·ªù x·ª≠ l√Ω</option>
                  <option value="shipped">üì¶ ƒêang giao</option>
                  <option value="completed">‚úÖ Ho√†n t·∫•t</option>
                  <option value="cancelled">‚ùå ƒê√£ h·ªßy</option>
                </select>
              </td>
              <td>
                <button
                  className="btn view"
                  onClick={() => setSelectedOrder(o)}
                >
                  üëÅ Xem chi ti·∫øt
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>

      {/* Modal chi ti·∫øt ƒë∆°n h√†ng */}
      {selectedOrder && (
        <div className="modal">
          <div className="modal-content">
            <h4>Chi ti·∫øt ƒë∆°n #{selectedOrder.id}</h4>
            <p><b>Kh√°ch h√†ng:</b> {selectedOrder.customer}</p>
            <p><b>T·ªïng ti·ªÅn:</b> {selectedOrder.total.toLocaleString()} ‚Ç´</p>
            <h5>S·∫£n ph·∫©m:</h5>
            <ul>
              {selectedOrder.items.map((item, i) => (
                <li key={i}>
                  {item.name} (x{item.qty}) - {item.price.toLocaleString()} ‚Ç´
                </li>
              ))}
            </ul>
            <button className="btn close" onClick={() => setSelectedOrder(null)}>
              ƒê√≥ng
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

function CartsSection() {
  return <p>üõí Qu·∫£n l√Ω gi·ªè h√†ng...</p>;
}
function ProductsSection() {
  return <p>üì± Qu·∫£n l√Ω s·∫£n ph·∫©m...</p>;
}
function AccountsSection() {
  return <p>üîë Qu·∫£n l√Ω t√†i kho·∫£n...</p>;
}

// ================== MAIN ADMIN PAGE ==================
export default function AdminPage() {
  const [active, setActive] = useState("users");

  const sections = [
    { id: "users", label: "Qu·∫£n l√Ω ng∆∞·ªùi d√πng" },
    { id: "orders", label: "Qu·∫£n l√Ω ƒë∆°n h√†ng" },
    { id: "carts", label: "Qu·∫£n l√Ω gi·ªè h√†ng" },
    { id: "products", label: "Qu·∫£n l√Ω s·∫£n ph·∫©m" },
    { id: "accounts", label: "Qu·∫£n l√Ω t√†i kho·∫£n" },
  ];

  return (
    <div className="admin-container">
      {/* Sidebar */}
      <aside className="admin-sidebar">
        <h1 className="logo">‚ö° Admin Dashboard</h1>
        <p className="subtitle">Trang qu·∫£n tr·ªã h·ªá th·ªëng</p>

        <nav className="menu">
          {sections.map((section) => (
            <button
              key={section.id}
              onClick={() => setActive(section.id)}
              className={`menu-item ${active === section.id ? "active" : ""}`}
            >
              {section.label}
            </button>
          ))}
        </nav>

        <p className="version">üöÄ Phi√™n b·∫£n x.x.x</p>
      </aside>

      {/* Main content */}
      <main className="admin-main">
        <h2 className="title">
          {sections.find((s) => s.id === active).label}
        </h2>

        <div className="content-box">
          {active === "users" && <UsersSection />}
          {active === "orders" && <OrdersSection />}
          {active === "carts" && <CartsSection />}
          {active === "products" && <ProductsSection />}
          {active === "accounts" && <AccountsSection />}
        </div>
      </main>
    </div>
  );
}
